@startuml
class pgl.app.fastCall2.VariationLibrary {
~ short chrom
~ int binStart
~ int[] positions
~ AllelePackage[][] allelePacks
- int[] potentialPositions
- ArrayList<AllelePackage>[] potentialAllelePackLists
+ {static} VariationLibrary getInstance(List<VariationLibrary>)
- void mergeIngs(List<IndividualGenotype>,int,int)
+ AllelePackage[] getAllelePacks(int)
+ int getPositionIndex(int)
+ int getStartIndex(int)
+ int getEndIndex(int)
+ short getChrom()
+ int getPosition(int)
+ void writeBinaryFileS(String)
+ void writeBinaryFileS(String,int[])
- void readBinaryFileS(String)
+ void writeTextFileS(String)
+ int compareTo(VariationLibrary)
}


class pgl.app.fastCall2.BuildVariationLibrary {
~ String referenceFileS
~ short chrom
~ int regionStart
~ int regionEnd
~ int maoThresh
~ int threadsNum
~ String ingDirS
~ String vLibDirS
~ String[] taxaNames
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void printInstructionAndUsage()
- void mkLibrary()
}


class pgl.app.fastCall2.BuildVariationLibrary$TaxonRead {
~ String fileS
+ IndividualGenotype call()
}


class pgl.app.fastCall2.IndividualCount {
~ String taxonName
~ short chrom
~ int binStart
~ int binEnd
~ byte[] alleleNum
~ short[][] alleleCounts
- void readBinaryFileS(String)
+ void writeTextFile(String)
- String getAlleleCountInfo(StringBuilder,int)
+ int compareTo(IndividualCount)
}


class pgl.app.fastCall2.IndividualGenotype {
~ String taxonName
~ short chrom
~ int binStart
~ int binEnd
~ ArrayList<int[]> allelePackList
- void readFile(String)
+ void writeTextFile(String)
+ String getTaxonName()
+ int getPositionNumber()
+ int getAlleleChromPosition(int)
+ int[] getAllelePack(int)
+ int compareTo(IndividualGenotype)
}


enum pgl.AppNames {
+  FastCall
+  FastCall2
+  HapScanner
+  PopDep
+ String name
+ String getName()
}


class pgl.app.fastCall2.ViewVariationLibrary {
~ String binaryLibFileS
~ String textLibFileS
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void convertLibrary()
+ void printInstructionAndUsage()
}


class pgl.app.fastCall2.ScanGenotype {
~ String referenceFileS
~ String taxaBamMapFileS
~ String libFileS
~ int chrom
~ int regionStart
~ int regionEnd
~ String baqMode
~ int mappingQThresh
~ int baseQThresh
~ double combinedErrorRate
~ String samtoolsPath
~ String outputDirS
~ int threadsNum
~ String[] subDirS
~ HashMap<String,List<String>> taxaBamsMap
~ HashMap<String,Double> taxaCoverageMap
~ String[] taxaNames
~ IntDoubleMap factorialMap
~ int maxFactorial
~ String vLibPosFileS
~ FastaBit genomeFa
~ int chromIndex
~ VariationLibrary vl
~ int vlStartIndex
~ int vlEndIndex
~ HashMap<Integer,String> posRefMap
~ HashMap<Integer,AllelePackage[]> posAllelePackMap
~ int[] positions
~ int vlBinStartIndex
~ int vlBinEndIndex
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void printInstructionAndUsage()
+ void mkFinalVCFFromIndiCounts()
+ void scanIndiCountsByThreadPool()
- void deleteTemperateFile()
- String getInfoAndGenotypes(List<short[]>,AllelePackage[])
- int[] getAlleleCounts(AllelePackage[],String,int,StringBuilder)
- String getGenotypeByShort(short[])
- void processVariationLibrary()
- void creatFactorialMap()
+ void mkDir()
- void parseTaxaBamMap(String)
}


class pgl.app.fastCall2.ScanGenotype$TaxonCountRead {
~ String fileS
+ IndividualCount call()
}


class pgl.app.fastCall2.ScanGenotype$IndiCount {
~ String command
~ String taxonName
~ String indiTaxonDirS
~ int[][] binBound
~ int[] binStarts
~ List<String> bamPaths
~ LongAdder counter
~ DataOutputStream dos
~ int currentBinIndex
+ void closeDos()
+ void setDos(int)
+ void writeAlleleCounts(int[])
+ void writeMissing()
+ void writeEmptyFiles()
+ IndiCount call()
}


abstract class pgl.AppAbstract {
# Options options
# HelpFormatter optionFormat
+ void printUsage()
}


class pgl.app.fastCall2.FastCall2 {
~ String[] toolNames
~ String currentTool
~ {static} int disBinSize
~ {static} int scanBinSize
~ {static} int maxAltNum
~ {static} int maxIndelLength
~ {static} byte[] pileupAlleleAscIIs
~ {static} HashByteByteMap pileupAscIIToAlleleCodingMap
~ {static} Dyad<int[][],int[]> getBins(int,int,int)
~ {static} void removeFirstPositionSign(StringBuilder)
}


class pgl.app.fastCall2.AllelePackage {
~ int[] allelePack
+ int[] getAllelePack()
+ int getFirstIntOfAllelePack()
+ int getAllelePackSize()
+ byte getAlleleCoding()
+ char getAlleleBase()
+ byte getIndelLength()
+ String getIndelSeq()
+ int getAlleleChromPosition(int)
+ StringBuilder getAlleleInfo(int,StringBuilder)
+ int compareTo(AllelePackage)
+ int hashCode()
+ boolean equals(Object)
~ {static} int[] getAllelePack(int,int,byte,int,String)
~ {static} int getAllelePackSizeFromIndelLength(int)
~ {static} int getAllelePackSizeFromFirstInt(int)
~ {static} int getAlleleChromPosition(int[],int)
~ {static} int getAlleleChromPosition(int,int)
~ {static} byte getAlleleCoding(int)
~ {static} char getAlleleBase(int)
~ {static} byte getIndelLength(int)
}


class pgl.app.fastCall2.CustomizeVariationLibrary {
~ String inputLibFileS
~ String positionFileS
~ String outputLibFileS
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void customizeLibrary()
+ void printInstructionAndUsage()
}


class pgl.app.fastCall2.DiscoverVariation {
~ String referenceFileS
~ String taxaBamMapFileS
~ String samtoolsPath
~ String outputDirS
~ String baqMode
~ int mappingQThresh
~ int baseQThresh
~ int mdcThresh
~ double mindrThresh
~ double maxdrTrresh
~ double horThresh
~ double herThresh
~ double tdrTresh
~ int chrom
~ int regionStart
~ int regionEnd
~ int threadsNum
~ int indelTypeThresh
~ HashMap<String,String[]> taxaBamPathMap
~ HashMap<String,Double> taxaCoverageMap
~ String[] taxaNames
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void printInstructionAndUsage()
- void variationDiscovery()
- void parseTaxaBamMap(String)
}


class pgl.app.fastCall2.DiscoverVariation$TaxonCall {
~ String command
~ int[][] binBound
~ int[] binStarts
~ String taxon
~ double taxonCoverage
~ File outDir
~ LongAdder counter
~ int currentPos
~ int currentDepth
~ StringBuilder baseSb
~ List<String> lList
~ int[] alleleCount
~ IntOpenHashSet insertionLengthSet
~ IntOpenHashSet deletionLengthSet
~ boolean ifWrite
~ byte altAllele
~ int indelLength
~ long[] indelSeqL
~ String indelSeq
~ int altAlleleDepth
~ DataOutputStream dos
~ int currentBinIndex
- void initialize1()
- void initialize2()
+ boolean processPileupLine(String)
+ void closeDos()
+ void setDos()
+ void writeVariants()
+ TaxonCall call()
}


interface pgl.AppInterface {
+ void creatAppOptions()
+ void retrieveAppParameters(String[])
+ void printUsage()
+ void printInstructionAndUsage()
}



pgl.app.fastCall2.Comparable <|.. pgl.app.fastCall2.VariationLibrary
pgl.AppAbstract <|-- pgl.app.fastCall2.BuildVariationLibrary
pgl.app.fastCall2.BuildVariationLibrary +.. pgl.app.fastCall2.BuildVariationLibrary$TaxonRead
pgl.app.fastCall2.Callable <|.. pgl.app.fastCall2.BuildVariationLibrary$TaxonRead
pgl.app.fastCall2.Comparable <|.. pgl.app.fastCall2.IndividualCount
pgl.app.fastCall2.Comparable <|.. pgl.app.fastCall2.IndividualGenotype
pgl.AppAbstract <|-- pgl.app.fastCall2.ViewVariationLibrary
pgl.AppAbstract <|-- pgl.app.fastCall2.ScanGenotype
pgl.app.fastCall2.ScanGenotype +.. pgl.app.fastCall2.ScanGenotype$TaxonCountRead
pgl.app.fastCall2.Callable <|.. pgl.app.fastCall2.ScanGenotype$TaxonCountRead
pgl.app.fastCall2.ScanGenotype +.. pgl.app.fastCall2.ScanGenotype$IndiCount
pgl.app.fastCall2.Callable <|.. pgl.app.fastCall2.ScanGenotype$IndiCount
pgl.AppInterface <|.. pgl.AppAbstract
pgl.app.fastCall2.Comparable <|.. pgl.app.fastCall2.AllelePackage
pgl.AppAbstract <|-- pgl.app.fastCall2.CustomizeVariationLibrary
pgl.AppAbstract <|-- pgl.app.fastCall2.DiscoverVariation
pgl.app.fastCall2.DiscoverVariation +.. pgl.app.fastCall2.DiscoverVariation$TaxonCall
pgl.app.fastCall2.Callable <|.. pgl.app.fastCall2.DiscoverVariation$TaxonCall
@enduml